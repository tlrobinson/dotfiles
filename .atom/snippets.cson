# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':
  'React Component':
    'prefix': 'React'
    'body': '/* @flow */\n\nimport React, { Component, PropTypes } from "react";\n\ntype Props = {\n};\n\ntype State = {\n};\n\nexport default class $1 extends Component<*, Props, State> {\n    state: State;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {};\n    }\n\n    static defaultProps = {};\n\n    render() {\n        return (\n            <div>hello</div>\n        );\n    }\n}\n\nconst $1 = ({}: Props) =>\n    <div>hello</div>;\n\nexport default $1;\n'
  'React Lifecycle Methods':
    'prefix': 'Lifecycle'
    'body': '\n    // componentWillMount() {}\n    // componentDidMount() {}\n    // componentWillReceiveProps(nextProps) {}\n    // shouldComponentUpdate(nextProps, nextState) {}\n    // componentWillUpdate(nextProps, nextState) {}\n    // componentDidUpdate(prevProps, prevState) {}\n    // componentWillUnmount() {}\n'
